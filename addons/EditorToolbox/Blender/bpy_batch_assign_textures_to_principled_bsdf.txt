import bpy
import os

texture_root_path = bpy.path.abspath("//Texture\Common")

for material in bpy.data.materials:
	#
	print("------------------------")
	print("Processing material: " + material.name)
	#
	#
	
	material_name_without_prefix = material.name.split("_", 1)[1]
	tex_base_color_name = "T_" + material_name_without_prefix + ".png"
	tex_normal_name = "T_" + material_name_without_prefix + "_n.png"
	color_file_path = os.path.join(texture_root_path, f"T_{material_name_without_prefix}.png")
	normal_file_path = os.path.join(texture_root_path, f"T_{material_name_without_prefix}_n.png")
	
	if material.node_tree:
		#
		print("node_tree exists")
		#
		#
		
		for _node in material.node_tree.nodes:
			
			if _node.type == "BSDF_PRINCIPLED":
				print("BSDF_PRINCIPLED exists")
				
				principled = _node
				
				if (os.path.exists(color_file_path)):
					print("color texture path found")
					
					base_color_socket_exists = False
					for link in material.node_tree.links:
						if link.to_node == principled and link.to_socket.identifier == "Base Color":
							print("the BSDF_PRINCIPLED node already has a link to Base Color")
							
							base_color_socket_exists = True
							
							if (link.from_node.type == "TEX_IMAGE"):
								print("a TEX_IMAGE node is connected to Base Color, assigning a new texture")
								
								if (tex_base_color_name in bpy.data.images):
									print("image already in bpy.data.image")
									link.from_node.image = bpy.data.images[tex_base_color_name]
								else:
									print("loading image: " + tex_base_color_name)
									link.from_node.image = bpy.data.images.load(color_file_path)
							else:
								print("err: an unknown node is connected to Base Color")
								
							break
						
					if not base_color_socket_exists:
						print("creating a TexImage node, then linking it to Base Color")
						
						shader_node_tex_image = material.node_tree.nodes.new("ShaderNodeTexImage")
												
						if (tex_base_color_name in bpy.data.images):
							print("image already in bpy.data.image")
							shader_node_tex_image.image = bpy.data.images[tex_base_color_name]
						else:
							print("loading image: " + tex_base_color_name)
							shader_node_tex_image.image = bpy.data.images.load(color_file_path)
						
						shader_node_tex_image.location = (-300, 300)
												
						material.node_tree.links.new(shader_node_tex_image.outputs["Color"], principled.inputs["Base Color"])
				else:
					print("err: color texture not found, color_file_path: " + color_file_path)
				
				# ---
				
				if (os.path.exists(normal_file_path)):
					print("normal texture path found")
					
					node_normal_map = None
					node_normal_map_exists = False
					
					node_normal_texture = None
					node_normal_texture_exists = False

					for link in material.node_tree.links:
						if link.to_node == principled and link.to_socket.identifier == "Normal":
							print("the BSDF_PRINCIPLED node already has a link to Normal")
							node_normal_map_exists = True
							node_normal_map = link.from_node
							
					if not node_normal_map_exists:
						print("a Normal Map node was not found, creating one")
						node_normal_map = material.node_tree.nodes.new("ShaderNodeNormalMap")
						material.node_tree.links.new(node_normal_map.outputs["Normal"], principled.inputs["Normal"])
						node_normal_map.location = (-200, 0)
					
					for normal_map_link in node_normal_map.inputs["Color"].links:
						print("Link found on Color input of node_normal_map")
						
						if normal_map_link.from_socket.identifier == "Color" and normal_map_link.from_node.type == "TEX_IMAGE":
							print("the Normal Map Color input is already linked to an Image Texture node")
							node_normal_texture_exists = True
							node_normal_texture = normal_map_link.from_node
						else:
							print("err: unknown connection to node_normal_map")
						
					
					if not node_normal_texture_exists:
						print("creating an Image Texture node")
						
						node_normal_texture = material.node_tree.nodes.new('ShaderNodeTexImage')
						material.node_tree.links.new(node_normal_texture.outputs["Color"], node_normal_map.inputs["Color"])
						node_normal_texture.location = (-500, 0)
												
					if (tex_normal_name in bpy.data.images):
						print("image already in bpy.data.image")
						node_normal_texture.image = bpy.data.images[tex_normal_name]
					else:
						print("loading image: " + tex_base_color_name)
						node_normal_texture.image = bpy.data.images.load(normal_file_path)


	print("done")
	print("------------------------")
